AWSTemplateFormatVersion: '2010-09-09'
Description: PhotoS3
Parameters:
  BucketPrefix:
    Type: String
    Description: Prefix for S3 bucket name
    ConstraintDescription: must be valid S3 bucket characters and prefix+accountnumber+suffix <=63 characters
    Default: photos3-
    MinLength: 0
    MaxLength: 63
    AllowedPattern: '[-_\.a-zA-Z0-9]*'

  BucketSuffix:
    Type: String
    Description: Suffix for S3 bucket name
    ConstraintDescription: must be valid S3 bucket characters and prefix+accountnumber+suffix <=63 characters
    Default: ''
    MinLength: 0
    MaxLength: 63
    AllowedPattern: '[-_\.a-zA-Z0-9]*'

  S3DeployKey:
    Type: String
    Description: Code revision
    ConstraintDescription: must be a valid S3 key
    MinLength: 1
    AllowedPattern: '^[a-f0-9]+$'

  NewImageCheckSchedule:
    Type: String
    Description: CloudWatch Event schedule expression for processing new images
    ConstraintDescription: must be a valid rate
    Default: 'rate(5 minutes)'
    AllowedPattern: '^rate\(.*\)$'

  S3PrefixUpload:
    Type: String
    Description: S3 key prefix for new uploads
    MinLength: 1
    Default: source

  S3PrefixThumbnail:
    Type: String
    Description: S3 key prefix for thumbnails
    MinLength: 1
    Default: thumbnail

  S3PrefixOriginal:
    Type: String
    Description: S3 key prefix for original images
    MinLength: 1
    Default: original

Conditions: {}
Mappings: {}

Outputs:
  UploadBucket:
    Description: S3 bucket for uploads
    Value: !Ref PhotoBucket

  MetadataTable:
    Description: DynamoDB table for image metadata
    Value: !Ref PhotoMetaTable

  AlbumTable:
    Description: DynamoDB table for Album-Image membership
    Value: !Ref PhotoAlbumTable

Resources:
  PhotoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${BucketPrefix}${AWS::AccountId}${BucketSuffix}
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            ExpirationInDays: 14
            NoncurrentVersionExpirationInDays: 14
            Prefix: code/
            Status: Enabled
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            NoncurrentVersionExpirationInDays: 1
            Prefix: !Sub ${S3PrefixUpload}/
            Status: Enabled
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            NoncurrentVersionExpirationInDays: 1
            Prefix: !Sub ${S3PrefixThumbnail}/
            Status: Enabled

      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Ref S3PrefixUpload
            Queue: !Sub ${NewImageQueue.Arn}
      Tags:
        - Key: Platform
          Value: PhotoS3
        - Key: Purpose
          Value: Storage

  NewImageQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300

  NewImageQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref NewImageQueue
      PolicyDocument:
        Version: 2012-10-17
        Id: S3Publish
        Statement:
          - Sid: S3PublishMessage
            Effect: Allow
            Principal: {Service: s3.amazonaws.com}
            Action: ['SQS:SendMessage']
            Resource: !Sub ${NewImageQueue.Arn}
            Condition:
              ArnLike:
                'aws:SourceArn': !Sub ${PhotoBucket.Arn}

  NewImageWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: sqsrx
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:DeleteMessage*'
                  - 'sqs:GetQueueAttributes'
                  - 'sqs:GetQueueUrl'
                  - 'sqs:ListDeadLetterSourceQueues'
                  - 'sqs:ReceiveMessage'
                Resource: !Sub ${NewImageQueue.Arn}

              - Effect: Allow
                Action: 'sqs:ListQueues'
                Resource: !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*'

        - PolicyName: logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*

        - PolicyName: s3fetch
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListBucket*'
                Resource: !Sub ${PhotoBucket.Arn}

              - Effect: Allow
                Action:
                  - 's3:DeleteObject*'
                  - 's3:GetObject*'
                Resource: !Sub ${PhotoBucket.Arn}/${S3PrefixUpload}/*

              - Effect: Allow
                Action:
                  - 's3:PutObject*'
                Resource: !Sub ${PhotoBucket.Arn}/${S3PrefixOriginal}/*

        - PolicyName: dynamodb
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:Batch*'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateTable'
                Resource:
                  - !Sub ${PhotoAlbumTable.Arn}
                  - !Sub ${PhotoMetaTable.Arn}

        - PolicyName: thumbnails
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Sub ${ThumbnailWorkerTopic}

  PhotoMetaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: checksum
          AttributeType: S
      KeySchema:
        - KeyType: HASH
          AttributeName: checksum
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Platform
          Value: PhotoS3
        - Key: Purpose
          Value: Metadata

  PhotoAlbumTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
        - AttributeName: checksum
          AttributeType: S
      KeySchema:
        - KeyType: HASH
          AttributeName: name
        - KeyType: RANGE
          AttributeName: checksum
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Platform
          Value: PhotoS3
        - Key: Purpose
          Value: Metadata

  NewImageWorker:
    Type: AWS::Lambda::Function
    Properties:
      Description: Initially processes new images
      Handler: photos3.lambda.process_new_image_queue
      Code:
        S3Bucket: !Ref PhotoBucket
        S3Key: !Sub code/${S3DeployKey}.zip
      MemorySize: 256
      Role: !Sub ${NewImageWorkerRole.Arn}
      Runtime: python3.6
      Timeout: 300
      Environment:
        Variables:
          ALBUM_TABLE: !Sub ${PhotoAlbumTable}
          TASK_QUEUE: !Sub ${NewImageQueue.QueueName}
          META_TABLE: !Sub ${PhotoMetaTable}
          THUMBNAIL_TOPIC: !Sub ${ThumbnailWorkerTopic}
          S3_PREFIX_ORIGINAL: !Ref S3PrefixOriginal
      Tags:
        - Key: Platform
          Value: PhotoS3
        - Key: Purpose
          Value: ImageProcessing
    DependsOn: NewImageWorkerRole

  NewImageRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Check for new images
      ScheduleExpression: !Sub ${NewImageCheckSchedule}
      State: ENABLED
      Targets:
        - Arn: !Sub ${NewImageWorker.Arn}
          Id: NewImageWorker

  NewImageRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub ${NewImageWorker}
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !Sub ${NewImageRule.Arn}

  ThumbnailWorkerTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ThumbnailGenerator
      Subscription:
        - Endpoint: !Sub ${ThumbnailWorker.Arn}
          Protocol: lambda

  ThumbnailWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*

        - PolicyName: s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListBucket*'
                Resource: !Sub ${PhotoBucket.Arn}

              - Effect: Allow
                Action:
                  - 's3:GetObject*'
                Resource: !Sub ${PhotoBucket.Arn}/${S3PrefixOriginal}/*

              - Effect: Allow
                Action:
                  - 's3:PutObject*'
                Resource: !Sub ${PhotoBucket.Arn}/${S3PrefixThumbnail}/*

  ThumbnailWorker:
    Type: AWS::Lambda::Function
    Properties:
      Description: Generates thumbnails
      Handler: photos3.lambda.process_thumbnail
      Code:
        S3Bucket: !Ref PhotoBucket
        S3Key: !Sub code/${S3DeployKey}.zip
      MemorySize: 128
      Role: !Sub ${ThumbnailWorkerRole.Arn}
      Runtime: python3.6
      Timeout: 300
      Environment:
        Variables:
          S3_PREFIX_THUMBNAIL: !Ref S3PrefixThumbnail
      Tags:
        - Key: Platform
          Value: PhotoS3
        - Key: Purpose
          Value: ImageProcessing
    DependsOn: ThumbnailWorkerRole

  ThumbnailWorkerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Sub ${ThumbnailWorkerTopic}
      FunctionName: !Sub ${ThumbnailWorker.Arn}

# vim: ts=2:sw=2
